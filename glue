#!/usr/bin/python3

import re
import argparse
import time
from io import StringIO
from typing import Callable
from pathlib import Path
from datetime import date

FILE_SEPARATOR = "\n"
IMPORT_PATTERN = re.compile(r"from\s+(\.+)(\S+)\s+import\s+\*\s*(?:#.*)?$")
MAIN_PATTERN = re.compile(r"^if\s+__name__\s*==\s*\"__main__\"\s*:\s*$")
COMMAND_PATTERN = re.compile(r"<GLUE::([A-Z]+)>")

parser = argparse.ArgumentParser(
    prog="GLUE", description="Basic Python3 file agregator tool"
)

parser.add_argument(
    "main",
    type=Path,
    help="python file to glue"
)
parser.add_argument(
    "-o", "--output",
    type=Path,
    help="name of file to output to"
)
parser.add_argument(
    "-d", "--debug",
    action="store_true",
    help="show debug info on run"
)
args = parser.parse_args()
if not args.output:
    args.output = args.main.with_name(args.main.stem+"_glued.py")

def functimer(f:Callable):
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = f(*args, **kwargs)
        end = time.perf_counter()
        return result, end-start
    return wrapper


def substitute_command(command: re.Match) -> str:
    match command.group(1):
        case "DATE":
            return date.today().strftime("%d-%m-%Y")
        case _:
            raise ValueError(
                f"unknown command: {command.group(1)}"
            )

def glue_file(file:Path) -> StringIO:

    buffer = StringIO()
    glued_files: set[Path] = set()
    
    def parse(file:Path, depth=0) -> None:
        resolved_file = file.resolve()
        glued_files.add(resolved_file)

        with file.open("r") as f:
            for line in f:

                if line.startswith("#"):
                    buffer.write(
                        COMMAND_PATTERN.sub(substitute_command, line)
                    )
                    continue 
                        
                if match := IMPORT_PATTERN.match(line):
                    parent_calls = len(match.group(1))
                    subpath = match.group(2).replace(".", "/")+".py"
                    module = resolved_file
                    for _ in range(parent_calls):
                        module = module.parent
                    module = module / subpath
                    if module not in glued_files:
                        parse(module, depth=depth+1)
                    continue
                elif MAIN_PATTERN.match(line) and depth!=0:
                    break
                
                buffer.write(line)

        buffer.write(FILE_SEPARATOR)

    parse(file)
    return buffer

if args.debug:
    timed_glue_file = functimer(glue_file)
    buffer, duration = timed_glue_file(args.main)
    print(f"Time Spent Parsing: {duration*1000:f}ms")
else:
    buffer = glue_file(args.main)

with args.output.open("w") as out_file:
    out_file.write(buffer.getvalue())
